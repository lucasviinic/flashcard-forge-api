"""Change subject_id to UUID in flashcards

Revision ID: 0fb83c1a8100
Revises: e3b4e412526c
Create Date: 2025-02-23 18:49:53.547134

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0fb83c1a8100'
down_revision: Union[str, None] = 'e3b4e412526c'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('flashcards')
    op.drop_table('subjects')
    op.drop_table('sessions')
    op.drop_index('ix_users_email', table_name='users')
    op.drop_index('ix_users_google_id', table_name='users')
    op.drop_table('users')
    op.drop_index('ix_session_flashcards_id', table_name='session_flashcards')
    op.drop_table('session_flashcards')
    op.drop_table('topics')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('topics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subject_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('topic_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='topics_subject_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='topics_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('session_flashcards',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('session_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('flashcard_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('response', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['flashcard_id'], ['flashcards.id'], name='session_flashcards_flashcard_id_fkey'),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name='session_flashcards_session_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='session_flashcards_pkey')
    )
    op.create_index('ix_session_flashcards_id', 'session_flashcards', ['id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('google_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('picture', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('account_type', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('max_flashcards', sa.INTEGER(), server_default=sa.text('50'), autoincrement=False, nullable=False),
    sa.Column('flashcards_count', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=False),
    sa.Column('last_payment_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('subscription_expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_users_google_id', 'users', ['google_id'], unique=True)
    op.create_index('ix_users_email', 'users', ['email'], unique=True)
    op.create_table('sessions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('topic_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('correct_answer_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('incorrect_answer_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_questions', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('total_time_spent', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('easy_question_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('medium_question_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('hard_question_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='fk_sessions_topic'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='sessions_topic_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey')
    )
    op.create_table('subjects',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('subject_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='subjects_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='subjects_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('flashcards',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('subject_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('topic_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('question', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('answer', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('difficulty', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_response', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('opened', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('origin', sa.VARCHAR(), server_default=sa.text("'user'::character varying"), autoincrement=False, nullable=False),
    sa.CheckConstraint("origin::text = ANY (ARRAY['user'::character varying, 'ai'::character varying]::text[])", name='check_origin_valid_values'),
    sa.ForeignKeyConstraint(['subject_id'], ['subjects.id'], name='flashcards_subject_id_fkey'),
    sa.ForeignKeyConstraint(['topic_id'], ['topics.id'], name='flashcards_topic_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='flashcards_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='flashcards_pkey')
    )
    # ### end Alembic commands ###
